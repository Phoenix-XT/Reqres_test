{
	"info": {
		"_postman_id": "8d6316ab-54f6-4533-b114-ce413a57aa8b",
		"name": "Reqres.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17573107",
		"_collection_link": "https://warped-sunset-709636.postman.co/workspace/40992d19-625e-4ea5-8a75-0f5046fd5ba4/collection/17573107-8d6316ab-54f6-4533-b114-ce413a57aa8b?action=share&source=collection_link&creator=17573107"
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Validate Response status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - id and token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id').to.be.a('number').and.to.be.above(0, \"Id should be a positive integer\");;\r",
							"    pm.expect(responseData).to.have.property('token').to.be.a('string').and.to.have.lengthOf.at.least(1, 'Token should not be empty');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				},
				"description": "\n### Register User\n\nThis endpoint is used to register a new user.\n\n#### Request Body\n- `email` (string, required): The email of the user.\n- `password` (string, required): The password for the user.\n\n#### Response\n- `id` (number): The unique identifier for the registered user.\n- `token` (string): The authentication token for the registered user.\n\n#### Example\nRequest:\n```json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"********\"\n}\n```\n\nResponse:\n```json\n{\n  \"id\": 123,\n  \"token\": \"*************\"\n}\n```\n"
			},
			"response": [
				{
					"name": "Sample of a successful registration",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:09:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "36"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704136143&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=5fdUWEVrpVOA1%2F2KPkwXLgu7QXbOnL%2BnR%2BYUIe7F6i8%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704136143&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=5fdUWEVrpVOA1%2F2KPkwXLgu7QXbOnL%2BnR%2BYUIe7F6i8%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"24-4iP0za1geN2he+ohu8F0FhCjLks\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed0dedb9e26361-LHR"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 4,\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}"
				},
				{
					"name": "Sample unsuccessful registration",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:14:12 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "37"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704136452&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=YUTzkTRY%2FvwWEJS%2FekSA6E%2FdEyCUBiTmiANEZ88UT0U%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704136452&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=YUTzkTRY%2FvwWEJS%2FekSA6E%2FdEyCUBiTmiANEZ88UT0U%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"25-Ik70kof1lbc973ShN5FoVPxYn7A\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed157e6b4b6361-LHR"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Missing email or username\"\n}"
				}
			]
		},
		{
			"name": "Login user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Validate Response status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Setting the token as an Env variable\", function () {\r",
							"  const responseJson = pm.response.json();\r",
							"  \r",
							"  if (responseJson) {\r",
							"    pm.environment.set(\"accessToken\", responseJson.token);\r",
							"    console.log(\"Token set as environment variable:\", responseJson.token);\r",
							"  } else {\r",
							"    console.error(\"Unable to retrieve token.\");\r",
							"    pm.test.fail(\"Unable to retrieve token.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response has the required fields - token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('token').to.be.a('string').and.to.have.lengthOf.at.least(1, 'Token should not be empty');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				},
				"description": "\nThis endpoint is used to authenticate and login a user. The HTTP POST request should be made to {{baseUrl}}/login with a raw request body containing the user's email and password.\n\n### Request Body\n- email (string, required): The email of the user.\n- password (string, required): The password of the user.\n\n### Response\nUpon successful authentication, the server responds with a token in the following format:\n- token (string): The authentication token for the user.\n\nExample response:\n```\n{\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}\n```\n"
			},
			"response": [
				{
					"name": "Sample of succcesful login",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:05:51 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704135951&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rAA3mdfj1mlaAbdds708AcJnbftG4opPMFJlnMzJPJI%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704135951&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rAA3mdfj1mlaAbdds708AcJnbftG4opPMFJlnMzJPJI%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"1d-lGCrvD6B7Qzk11+2C98+nGhhuec\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed09404de06361-LHR"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}"
				},
				{
					"name": "Sample of an unsuccessful login",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\"\r\n    // \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:12:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "28"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704136323&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Fv%2BmAuKUhiamS%2Fnp2u%2BBVJOqgT%2B%2BTOh0sCoUX5tLGFQ%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704136323&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Fv%2BmAuKUhiamS%2Fnp2u%2BBVJOqgT%2B%2BTOh0sCoUX5tLGFQ%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"1c-NmpazMScs9tOqR7eDEesn+pqC9Q\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed12554ab16361-LHR"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Missing password\"\n}"
				}
			]
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validating Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Response has the required fields - name, job, id, and createdAt and in the required format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a(\"string\");\r",
							"    pm.expect(responseData.job).to.exist.and.to.be.a(\"string\");\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a(\"string\");\r",
							"    pm.expect(responseData.createdAt).to.exist.and.to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the Request body;Name and job are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "\nThis endpoint allows you to create a new user by sending a POST request to the specified URL. The request should include a JSON payload in the raw request body, containing the user's name and job.\n\n### Request Body\n- `name` (string): The name of the user.\n- `job` (string): The job title of the user.\n\nUpon successful creation, the server will respond with a status code of 201 and a JSON object containing the newly created user's ID and the timestamp of creation.\n\n### Response\n- `id` (string): The unique identifier of the newly created user.\n- `createdAt` (string): The timestamp indicating when the user was created.\n\n#### Example Response\n```json\n{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\",\n    \"id\": \"452\",\n    \"createdAt\": \"2024-01-01T19:25:26.137Z\"\n}\n```\n"
			},
			"response": [
				{
					"name": "Sample successful user creation",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:25:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "84"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704137126&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=hOxTPySf5%2BwOdjtiCDTume3xtro72Dn981%2FfH8kokGQ%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704137126&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=hOxTPySf5%2BwOdjtiCDTume3xtro72Dn981%2FfH8kokGQ%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"54-c2/wf9myF4GlmQJ8cVUyMuYT0RE\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed25ee293c6361-LHR"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\",\n    \"id\": \"452\",\n    \"createdAt\": \"2024-01-01T19:25:26.137Z\"\n}"
				}
			]
		},
		{
			"name": "Single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validating Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Body\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('data');\r",
							"\r",
							"    const data = responseBody.data;\r",
							"    pm.expect(data).to.have.property('id', 2).and.is.a('number');\r",
							"    pm.expect(data).to.have.property('email', 'janet.weaver@reqres.in').and.is.a('string');\r",
							"    pm.expect(data).to.have.property('first_name', 'Janet').and.is.a('string');\r",
							"    pm.expect(data).to.have.property('last_name', 'Weaver').and.is.a('string');\r",
							"    pm.expect(data).to.have.property('avatar', 'https://reqres.in/img/faces/2-image.jpg').and.is.a('string');\r",
							"\r",
							"    pm.expect(responseBody).to.have.property('support');\r",
							"    const support = responseBody.support;\r",
							"    pm.expect(support).to.have.property('url', 'https://reqres.in/#support-heading').and.is.a('string');\r",
							"    pm.expect(support).to.have.property('text', 'To keep ReqRes free, contributions towards server costs are appreciated!').and.is.a('string');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				},
				"description": "\nThis endpoint makes an HTTP GET request to retrieve information about a specific user. The request should be made to {{baseUrl}}/users/2. The response will contain the user's ID, email, first name, last name, and avatar, along with support information including a URL and text. \n\nFor example, a successful response will have a status code of 200 and will include the user's details such as ID, email, first name, last name, and avatar, as well as support information with a URL and text.\n\nPlease note that the user ID in the request URL can be replaced with the desired user ID to retrieve information about a different user.\n"
			},
			"response": [
				{
					"name": "Sample request getting a valid user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:43:39 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1703915489&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=j7Ftimok5sI8HXNm8%2Fm54U1qPiWOWYPrvPXkuIJ6cE0%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1703915489&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=j7Ftimok5sI8HXNm8%2Fm54U1qPiWOWYPrvPXkuIJ6cE0%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"118-pbdwwFo9SKNhD3Lx5iHJyngpq00\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "5282"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed40a1cc1c6361-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"id\": 2,\n        \"email\": \"janet.weaver@reqres.in\",\n        \"first_name\": \"Janet\",\n        \"last_name\": \"Weaver\",\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n    },\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				},
				{
					"name": "Sample request getting an invalid user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/89",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"89"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 19:45:06 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "2"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704138306&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=tCHV63e4mhDothtM%2BByYO50y9oE302mCl9L95Fb6xuw%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704138306&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=tCHV63e4mhDothtM%2BByYO50y9oE302mCl9L95Fb6xuw%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "EXPIRED"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed42beebc86361-LHR"
						}
					],
					"cookie": [],
					"body": "{}"
				}
			]
		},
		{
			"name": "Update user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validate Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response has the required fields - name, job, and updatedAt\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('name').and.to.be.a(\"string\");\r",
							"    pm.expect(responseData).to.have.property('job').and.to.be.a(\"string\");\r",
							"    pm.expect(responseData).to.have.property('updatedAt').and.to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Request Body;Name and job are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				},
				"description": "\n### Update User Details\n\nThis endpoint allows the client to update the details of a specific user.\n\n#### Request\n\n- Method: PUT\n- Endpoint: `{{baseUrl}}/users/2`\n- Body (raw, JSON):\n\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\"\n}\n```\n\n#### Response\n\n- Status: 200\n- Body:\n\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\",\n    \"updatedAt\": \"\"\n}\n```\n\n#### Example Response\n\n```json\n{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\",\n    \"updatedAt\": \"2024-01-01T20:16:40.002Z\"\n}\n"
			},
			"response": [
				{
					"name": "Sample of a successful user",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 20:16:40 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704140199&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=pR54pJFBhw9ASbB%2BQrgYT1ZbxNJbrEQxjCSG3mrVRu4%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704140199&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=pR54pJFBhw9ASbB%2BQrgYT1ZbxNJbrEQxjCSG3mrVRu4%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"50-HlK4nKHyF1k8HsY29LXBpVL4cWc\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed70f9ca68d168-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\",\n    \"updatedAt\": \"2024-01-01T20:16:40.002Z\"\n}"
				}
			]
		},
		{
			"name": "Update user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validate Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response has the required fields - name, job, and updatedAt\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('name').and.to.be.a(\"string\");\r",
							"    pm.expect(responseData).to.have.property('job').and.to.be.a(\"string\");\r",
							"    pm.expect(responseData).to.have.property('updatedAt').and.to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Request Body;Name and job are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion residents\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				},
				"description": "\n### Update User Details\n\nThis endpoint allows the client to update the details of a specific user.\n\n#### Request\n\n- Method: PUT\n- Endpoint: `{{baseUrl}}/users/2`\n- Body (raw, JSON):\n\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\"\n}\n```\n\n#### Response\n\n- Status: 200\n- Body:\n\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\",\n    \"updatedAt\": \"\"\n}\n```\n\n#### Example Response\n\n```json\n{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\",\n    \"updatedAt\": \"2024-01-01T20:16:40.002Z\"\n}\n"
			},
			"response": [
				{
					"name": "Sample of a successful Update on user details",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion residents\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 21:00:11 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704142811&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=shcYy36cSnuoA9JGi0b4pEA%2Fq%2Bez0eEF%2BGHQOz5jst4%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704142811&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=shcYy36cSnuoA9JGi0b4pEA%2Fq%2Bez0eEF%2BGHQOz5jst4%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"51-RsQ2KQYxsD7TrMWnxaR/k5ibs6I\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83edb0bb2f367701-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion residents\",\n    \"updatedAt\": \"2024-01-01T21:00:11.416Z\"\n}"
				}
			]
		},
		{
			"name": "All users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Total pages is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.total_pages).to.exist.and.to.be.a('number').and.to.satisfy((value) => value >= 0, \"Total pages must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Body\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    // Checking for the required properties in the response\r",
							"    pm.expect(responseBody).to.have.property('page', 2);\r",
							"    pm.expect(responseBody).to.have.property('per_page', 6);\r",
							"    pm.expect(responseBody).to.have.property('total', 12);\r",
							"    pm.expect(responseBody).to.have.property('total_pages', 2);\r",
							"\r",
							"    // Checking if 'data' property exists and is an array\r",
							"    pm.expect(responseBody).to.have.property('data').that.is.an('array');\r",
							"\r",
							"    //If'data' is an array, checking the structure of the items\r",
							"    if (responseBody.data && responseBody.data.length > 0) {\r",
							"        const firstDataItem = responseBody.data[0];\r",
							"        pm.expect(firstDataItem).to.have.property('id');\r",
							"        pm.expect(firstDataItem).to.have.property('email');\r",
							"        pm.expect(firstDataItem).to.have.property('first_name');\r",
							"        pm.expect(firstDataItem).to.have.property('avatar');\r",
							"    } else {\r",
							"        // If 'data' is empty or not an array, fail the test\r",
							"        pm.test.fail('No data found in the response.');\r",
							"    }\r",
							"    // Checking if 'support' property exists\r",
							"    pm.expect(responseBody).to.have.property('support');\r",
							"\r",
							"    // Checking the properties inside 'support'object\r",
							"    const support = responseBody.support;\r",
							"    pm.expect(support).to.have.property('url', 'https://reqres.in/#support-heading');\r",
							"    pm.expect(support).to.have.property('text', 'To keep ReqRes free, contributions towards server costs are appreciated!');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				},
				"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of users with pagination support. The \"page\" query parameter is used to specify the page number. The response returns the requested page details along with user data and support information.\n\n### Request\n\n- Method: GET\n- Endpoint: {{baseUrl}}/users\n- Query Parameters:\n  - page (number): Specifies the page number to retrieve\n\n### Response\n\n- Status: 200 OK\n- Body:\n  ```json\n  {\n      \"page\": 2,\n      \"per_page\": 6,\n      \"total\": 12,\n      \"total_pages\": 2,\n      \"data\": [\n          {\n              \"id\": 7,\n              \"email\": \"michael.lawson@reqres.in\",\n              \"first_name\": \"Michael\",\n              \"last_name\": \"Lawson\",\n              \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\n          },\n          {\n              \"id\": 8,\n              \"email\": \"lindsay.ferguson@reqres.in\",\n              \"first_name\": \"Lindsay\",\n              \"last_name\": \"Ferguson\",\n              \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\n          },\n          {\n              \"id\": 9,\n              \"email\": \"tobias.funke@reqres.in\",\n              \"first_name\": \"Tobias\",\n              \"last_name\": \"Funke\",\n              \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\n          },\n          {\n              \"id\": 10,\n              \"email\": \"byron.fields@reqres.in\",\n              \"first_name\": \"Byron\",\n              \"last_name\": \"Fields\",\n              \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\n          },\n          {\n              \"id\": 11,\n              \"email\": \"george.edwards@reqres.in\",\n              \"first_name\": \"George\",\n              \"last_name\": \"Edwards\",\n              \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\n          },\n          {\n              \"id\": 12,\n              \"email\": \"rachel.howell@reqres.in\",\n              \"first_name\": \"Rachel\",\n              \"last_name\": \"Howell\",\n              \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\n          }\n      ],\n      \"support\": {\n          \"url\": \"https://reqres.in/#support-heading\",\n          \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n      }\n  }\n  ```\n\n### Example\n\n```json\n{\n    \"page\": 2,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 7,\n            \"email\": \"michael.lawson@reqres.in\",\n            \"first_name\": \"Michael\",\n            \"last_name\": \"Lawson\",\n            \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\n        },\n        {\n            \"id\": 8,\n            \"email\": \"lindsay.ferguson@reqres.in\",\n            \"first_name\": \"Lindsay\",\n            \"last_name\": \"Ferguson\",\n            \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\n        },\n        {\n            \"id\": 9,\n            \"email\": \"tobias.funke@reqres.in\",\n            \"first_name\": \"Tobias\",\n            \"last_name\": \"Funke\",\n            \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\n        },\n        {\n            \"id\": 10,\n            \"email\": \"byron.fields@reqres.in\",\n            \"first_name\": \"Byron\",\n            \"last_name\": \"Fields\",\n            \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\n        },\n        {\n            \"id\": 11,\n            \"email\": \"george.edwards@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Edwards\",\n            \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\n        },\n        {\n            \"id\": 12,\n            \"email\": \"rachel.howell@reqres.in\",\n            \"first_name\": \"Rachel\",\n            \"last_name\": \"Howell\",\n            \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}\n```\n"
			},
			"response": [
				{
					"name": "Sample request of All users on page 2",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 20:47:28 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1703671287&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=7kQOuTxS%2Bakj8N5%2BbvWrSmjDPpAjZUiSRxE9YNVS600%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1703671287&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=7kQOuTxS%2Bakj8N5%2BbvWrSmjDPpAjZUiSRxE9YNVS600%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"406-ut0vzoCuidvyMf8arZpMpJ6ZRDw\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "2057"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ed9e1848b2886b-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 2,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 7,\n            \"email\": \"michael.lawson@reqres.in\",\n            \"first_name\": \"Michael\",\n            \"last_name\": \"Lawson\",\n            \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\n        },\n        {\n            \"id\": 8,\n            \"email\": \"lindsay.ferguson@reqres.in\",\n            \"first_name\": \"Lindsay\",\n            \"last_name\": \"Ferguson\",\n            \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\n        },\n        {\n            \"id\": 9,\n            \"email\": \"tobias.funke@reqres.in\",\n            \"first_name\": \"Tobias\",\n            \"last_name\": \"Funke\",\n            \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\n        },\n        {\n            \"id\": 10,\n            \"email\": \"byron.fields@reqres.in\",\n            \"first_name\": \"Byron\",\n            \"last_name\": \"Fields\",\n            \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\n        },\n        {\n            \"id\": 11,\n            \"email\": \"george.edwards@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Edwards\",\n            \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\n        },\n        {\n            \"id\": 12,\n            \"email\": \"rachel.howell@reqres.in\",\n            \"first_name\": \"Rachel\",\n            \"last_name\": \"Howell\",\n            \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Total pages is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.total_pages).to.exist.and.to.be.a('number').and.to.satisfy((value) => value >= 0, \"Total pages must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Body\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    // Checking for the required properties in the response\r",
							"    pm.expect(responseBody).to.have.property('page', 1);\r",
							"    pm.expect(responseBody).to.have.property('per_page', 6);\r",
							"    pm.expect(responseBody).to.have.property('total', 12);\r",
							"    pm.expect(responseBody).to.have.property('total_pages', 2);\r",
							"\r",
							"    // Checking if 'data' property exists and is an array\r",
							"    pm.expect(responseBody).to.have.property('data').that.is.an('array');\r",
							"\r",
							"    //If'data' is an array, checking the structure of the items\r",
							"    if (responseBody.data && responseBody.data.length > 0) {\r",
							"        const firstDataItem = responseBody.data[0];\r",
							"        pm.expect(firstDataItem).to.have.property('id');\r",
							"        pm.expect(firstDataItem).to.have.property('email');\r",
							"        pm.expect(firstDataItem).to.have.property('first_name');\r",
							"        pm.expect(firstDataItem).to.have.property('avatar');\r",
							"    } else {\r",
							"        // If 'data' is empty or not an array, fail the test\r",
							"        pm.test.fail('No data found in the response.');\r",
							"    }\r",
							"    // Checking if 'support' property exists\r",
							"    pm.expect(responseBody).to.have.property('support');\r",
							"\r",
							"    // Checking the properties inside 'support'object\r",
							"    const support = responseBody.support;\r",
							"    pm.expect(support).to.have.property('url', 'https://reqres.in/#support-heading');\r",
							"    pm.expect(support).to.have.property('text', 'To keep ReqRes free, contributions towards server costs are appreciated!');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?delay=3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				},
				"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of users. The request includes a query parameter \"delay\" with a value of 3. The response returns a status code of 200 along with user data, page information, and support details.\n\n### Request\n\n- Method: GET\n- Endpoint: {{baseUrl}}/users\n- Query Parameters:\n  - delay: 3\n\n### Response\n\n- Status: 200\n- Body:\n  ```json\n  {\n      \"page\": 0,\n      \"per_page\": 0,\n      \"total\": 0,\n      \"total_pages\": 0,\n      \"data\": [\n          {\n              \"id\": 0,\n              \"email\": \"\",\n              \"first_name\": \"\",\n              \"last_name\": \"\",\n              \"avatar\": \"\"\n          }\n      ],\n      \"support\": {\n          \"url\": \"\",\n          \"text\": \"\"\n      }\n  }\n  ```\n\n#### Example Response\n```json\n{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}\n```\n"
			},
			"response": [
				{
					"name": "Delayed Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?delay=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 21:37:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704145037&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=6%2FStiqMJfPhhR99CAS%2FRaOoJ%2Fn3aVm5BCtOXJM%2BDzrE%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704145037&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=6%2FStiqMJfPhhR99CAS%2FRaOoJ%2Fn3aVm5BCtOXJM%2BDzrE%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"3e4-2RLXvr5wTg9YQ6aH95CkYoFNuO8\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83ede712d9d2491c-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "Delete user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validate Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				},
				"description": "\n### Update User Details\n\nThis endpoint allows the client to update the details of a specific user.\n\n#### Request\n\n- Method: PUT\n- Endpoint: `{{baseUrl}}/users/2`\n- Body (raw, JSON):\n\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\"\n}\n```\n\n#### Response\n\n- Status: 200\n- Body:\n\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\",\n    \"updatedAt\": \"\"\n}\n```\n\n#### Example Response\n\n```json\n{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\",\n    \"updatedAt\": \"2024-01-01T20:16:40.002Z\"\n}\n"
			},
			"response": [
				{
					"name": "Sample Deleted user details",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 21:20:18 GMT"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704144018&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=reimuOV2l9w3f9sA6Lgi4M77x2FLJ1PZX5IhkhfMXHE%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704144018&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=reimuOV2l9w3f9sA6Lgi4M77x2FLJ1PZX5IhkhfMXHE%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83edce348b0e652d-LHR"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "all unknown request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Total pages is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.total_pages).to.exist.and.to.be.a('number').and.to.satisfy((value) => value >= 0, \"Total pages must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Body\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    // Checking for the required properties in the response\r",
							"    pm.expect(responseBody).to.have.property('page', 1);\r",
							"    pm.expect(responseBody).to.have.property('per_page', 6);\r",
							"    pm.expect(responseBody).to.have.property('total', 12);\r",
							"    pm.expect(responseBody).to.have.property('total_pages', 2);\r",
							"\r",
							"    // Checking if 'data' property exists and is an array\r",
							"    pm.expect(responseBody).to.have.property('data').that.is.an('array');\r",
							"\r",
							"    //If'data' is an array, checking the structure of the items\r",
							"    if (responseBody.data && responseBody.data.length > 0) {\r",
							"        const firstDataItem = responseBody.data[0];\r",
							"        pm.expect(firstDataItem).to.have.property('id').and.to.be.a(\"number\");\r",
							"        pm.expect(firstDataItem).to.have.property('name').and.to.be.a(\"string\");\r",
							"        pm.expect(firstDataItem).to.have.property('year').and.to.be.a(\"number\");\r",
							"        pm.expect(firstDataItem).to.have.property('color').and.to.be.a(\"string\");\r",
							"        pm.expect(firstDataItem).to.have.property('pantone_value').and.to.be.a(\"string\");\r",
							"    } else {\r",
							"        // If 'data' is empty or not an array, fail the test\r",
							"        pm.test.fail('No data found in the response.');\r",
							"    }\r",
							"    // Checking if 'support' property exists\r",
							"    pm.expect(responseBody).to.have.property('support');\r",
							"\r",
							"    // Checking the properties inside 'support'object\r",
							"    const support = responseBody.support;\r",
							"    pm.expect(support).to.have.property('url', 'https://reqres.in/#support-heading');\r",
							"    pm.expect(support).to.have.property('text', 'To keep ReqRes free, contributions towards server costs are appreciated!');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/unknown",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"unknown"
					]
				},
				"description": "\n# Get Unknown Data\n\nThis endpoint makes an HTTP GET request to retrieve unknown data.\n\n### Response\n\n- Status: 200\n- Body:\n  ```json\n  {\n      \"page\": 0,\n      \"per_page\": 0,\n      \"total\": 0,\n      \"total_pages\": 0,\n      \"data\": [\n          {\n              \"id\": 0,\n              \"name\": \"\",\n              \"year\": 0,\n              \"color\": \"\",\n              \"pantone_value\": \"\"\n          }\n      ],\n      \"support\": {\n          \"url\": \"\",\n          \"text\": \"\"\n      }\n  }\n  ```\n\n### Example Response\n\n```json\n{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}\n"
			},
			"response": [
				{
					"name": "sample request of list of unknown request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/unknown",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"unknown"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 21:47:33 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1704145287&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=1rACpYicwxgWJDklko0X3zcc4kVFRz9XVmzp3SjC7Zk%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1704145287&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=1rACpYicwxgWJDklko0X3zcc4kVFRz9XVmzp3SjC7Zk%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "366"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83edf61ffea0491c-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		}
	]
}
